"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerManager = void 0;
const deepmerge_ts_1 = require("deepmerge-ts");
const tiny_typed_emitter_1 = require("tiny-typed-emitter");
const en_json_1 = __importDefault(require("./languages/en.json"));
const player_1 = require("./player");
class PlayerManager extends tiny_typed_emitter_1.TypedEmitter {
    /**
     * Creates a new PlayerManager for easier managing multiple guilds. Your bot should only have one PlayerManager.
     */
    constructor(options) {
        super();
        this.options = options;
        this.players = [];
    }
    get translations() {
        var _a, _b;
        return (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.translations) !== null && _b !== void 0 ? _b : en_json_1.default;
    }
    /**
     * Gets an existing player for the given guildId or creates one if it does not exist.
     *
     * @param optionOverrides Option overrides for the guild player. Will be deep merged with options passed to the PlayerManager.
     */
    get(guildId, optionOverrides) {
        var _a;
        const player = this.players.find((p) => p.guildId === guildId);
        if (player)
            return player;
        let options = (_a = this.options) === null || _a === void 0 ? void 0 : _a.playerDefault;
        if (options && optionOverrides) {
            options = (0, deepmerge_ts_1.deepmerge)(options, optionOverrides);
        }
        if (!options && optionOverrides)
            options = optionOverrides;
        const newPlayer = new player_1.Player(guildId, options);
        newPlayer
            .on("trackStart", (track) => this.emit("trackStart", guildId, track))
            .on("trackEnd", (track) => this.emit("trackEnd", guildId, track))
            .on("error", (error) => this.emit("error", guildId, error))
            .on("destroyed", () => this.emit("destroyed", guildId));
        this.players.push(newPlayer);
        return newPlayer;
    }
    /**
     * Gets the player for the given guildId if it exists. Does not create a player.
     */
    find(guildId) {
        return this.players.find((player) => player.guildId === guildId);
    }
    /**
     * Removes and stops the player for the given guildId (if any).
     */
    remove(guildId) {
        const player = this.find(guildId);
        if (!player)
            return;
        player.stop();
        this.players = this.players.filter((player) => player.guildId !== guildId);
    }
}
exports.PlayerManager = PlayerManager;
//# sourceMappingURL=player-manager.js.map