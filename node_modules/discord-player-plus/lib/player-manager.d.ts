import { TypedEmitter } from "tiny-typed-emitter";
import { Player } from "./player";
import { Translations } from "./types/commands";
import { PlayerManagerEvents, PlayerManagerOptions, PlayerOptions } from "./types/player";
export declare class PlayerManager extends TypedEmitter<PlayerManagerEvents> {
    readonly options?: PlayerManagerOptions | undefined;
    private players;
    /**
     * Creates a new PlayerManager for easier managing multiple guilds. Your bot should only have one PlayerManager.
     */
    constructor(options?: PlayerManagerOptions | undefined);
    get translations(): Translations;
    /**
     * Gets an existing player for the given guildId or creates one if it does not exist.
     *
     * @param optionOverrides Option overrides for the guild player. Will be deep merged with options passed to the PlayerManager.
     */
    get(guildId: string, optionOverrides?: Partial<PlayerOptions>): Player;
    /**
     * Gets the player for the given guildId if it exists. Does not create a player.
     */
    find(guildId: string): Player | undefined;
    /**
     * Removes and stops the player for the given guildId (if any).
     */
    remove(guildId: string): void;
}
//# sourceMappingURL=player-manager.d.ts.map