"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHelpCommand = void 0;
/**
 * Creates a `/help` command for showing all available commands and bot metadata.
 */
const createHelpCommand = (playerManager, options) => {
    return {
        name: "help",
        description: playerManager.translations.help.description,
        run: (interaction) => __awaiter(void 0, void 0, void 0, function* () {
            yield interaction.reply({
                embeds: [
                    {
                        title: options.title,
                        url: options.url,
                        description: options.description,
                        author: options.author
                            ? {
                                name: options.author.name,
                                icon_url: options.author.iconUrl,
                                url: options.author.url,
                            }
                            : undefined,
                        fields: options.commands
                            .sort((a, b) => a.name.localeCompare(b.name))
                            .map((c) => {
                            return {
                                name: c.name,
                                value: c.description,
                                inline: true,
                            };
                        }),
                        footer: options.footerText
                            ? {
                                text: options.footerText,
                            }
                            : undefined,
                    },
                ],
                ephemeral: true,
            });
            return true;
        }),
    };
};
exports.createHelpCommand = createHelpCommand;
//# sourceMappingURL=help.js.map