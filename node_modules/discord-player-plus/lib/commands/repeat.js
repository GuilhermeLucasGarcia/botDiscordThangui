"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRepeatCommand = void 0;
const discord_js_1 = require("discord.js");
const player_1 = require("../types/player");
const repeatModeEntries = Object.entries(player_1.PlayerRepeatMode)
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    .filter(([_, value]) => typeof value !== "string");
/**
 * Creates a `/repeat` command for setting the repeat mode.
 */
const createRepeatCommand = (playerManager, options) => {
    return {
        name: "repeat",
        description: playerManager.translations.repeat.description,
        options: [
            {
                name: "mode",
                type: discord_js_1.ApplicationCommandOptionType.Integer,
                description: playerManager.translations.repeat.modeDescription,
                required: true,
                choices: repeatModeEntries.map(([key, value]) => {
                    var _a;
                    const translations = playerManager.translations.repeat
                        .modes;
                    return {
                        value,
                        name: (_a = translations[key.toString().toLowerCase()]) !== null && _a !== void 0 ? _a : "",
                    };
                }),
            },
        ],
        run: (interaction) => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const player = playerManager.find(interaction.guildId);
            if (!player) {
                yield interaction.reply({
                    content: playerManager.translations.global.noGuildPlayer,
                    ephemeral: (_a = options === null || options === void 0 ? void 0 : options.ephemeralError) !== null && _a !== void 0 ? _a : true,
                });
                return false;
            }
            const mode = interaction.options.getInteger("mode", true);
            player.setRepeat(mode);
            yield interaction.reply({
                content: playerManager.translations.repeat.success.replace("{mode}", (_b = playerManager.translations.repeat.modes[player_1.PlayerRepeatMode[mode].toString().toLowerCase()]) !== null && _b !== void 0 ? _b : ""),
                ephemeral: options === null || options === void 0 ? void 0 : options.ephemeral,
            });
            return true;
        }),
    };
};
exports.createRepeatCommand = createRepeatCommand;
//# sourceMappingURL=repeat.js.map