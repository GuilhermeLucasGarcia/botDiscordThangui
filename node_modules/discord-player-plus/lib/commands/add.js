"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAddCommand = void 0;
const discord_js_1 = require("discord.js");
const _1 = require(".");
const player_1 = require("../utils/player");
/**
 * Creates a `/add` command for adding tracks to the queue.
 */
const createAddCommand = (playerManager, options) => {
    return {
        name: "add",
        description: playerManager.translations.add.description,
        options: [
            {
                name: "query",
                description: playerManager.translations.play.optionDescription,
                type: discord_js_1.ApplicationCommandOptionType.String,
                required: true,
            },
        ],
        run: (interaction) => __awaiter(void 0, void 0, void 0, function* () {
            const searchResult = yield (0, _1.playTracks)(interaction, playerManager, false, options);
            if (!searchResult)
                return false;
            if (searchResult.playlist) {
                yield interaction.followUp({
                    content: playerManager.translations.add.successPlaylist.replace("{playlist}", (0, player_1.urlToMarkdown)(searchResult.playlist.title, searchResult.playlist.url, true)),
                });
                return true;
            }
            yield interaction.followUp({
                content: playerManager.translations.add.successTrack.replace("{track}", (0, player_1.trackToMarkdown)(searchResult.tracks[0], true)),
            });
            return true;
        }),
    };
};
exports.createAddCommand = createAddCommand;
//# sourceMappingURL=add.js.map