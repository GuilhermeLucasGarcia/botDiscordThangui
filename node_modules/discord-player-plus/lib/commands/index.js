"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.playTracks = exports.handleSlashCommand = void 0;
const discord_js_1 = require("discord.js");
/**
 * Helper function to execute slash commands for a given interaction from discord.js. Will check if command is supported, calls its `run` method and handles unexpected errors.
 *
 * @param discord.js interaction received by `client.on("interactionCreate")`.
 * @param commands All available slash commands that should be executable.
 * @param translations Translations used for error messages (e.g. unknown command).
 */
function handleSlashCommand(interaction, commands, translations) {
    return __awaiter(this, void 0, void 0, function* () {
        if (interaction.type !== discord_js_1.InteractionType.ApplicationCommand ||
            interaction.commandType !== discord_js_1.ApplicationCommandType.ChatInput) {
            return;
        }
        const slashCommand = commands.find((c) => c.name === interaction.commandName);
        if (!slashCommand) {
            return void (yield interaction.reply({
                content: translations.global.unsupportedCommand.replace("{command}", interaction.commandName),
                ephemeral: true,
            }));
        }
        if (!interaction.inCachedGuild()) {
            return void (yield interaction.reply({
                content: translations.global.unknownGuild,
                ephemeral: true,
            }));
        }
        try {
            yield slashCommand.run(interaction);
        }
        catch (e) {
            if (interaction.replied)
                return;
            const reply = { content: e.message };
            if (interaction.deferred)
                yield interaction.followUp(reply);
            else
                yield interaction.reply(reply);
        }
    });
}
exports.handleSlashCommand = handleSlashCommand;
function playTracks(interaction, playerManager, immediate, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        // check that user is in voice channel
        if (!interaction.member.voice.channel) {
            yield interaction.reply({
                content: playerManager.translations.play.userNotInVoiceChannel,
                ephemeral: (_a = options === null || options === void 0 ? void 0 : options.ephemeralError) !== null && _a !== void 0 ? _a : true,
            });
            return null;
        }
        // check bot voice channel permissions
        if (interaction.guild.members.me) {
            const permissions = interaction.member.voice.channel.permissionsFor(interaction.guild.members.me);
            if (!permissions.has(["Connect", "Speak"])) {
                yield interaction.reply({
                    content: playerManager.translations.play.insufficientVoiceChannelPermissions.replace("{channel}", interaction.member.voice.channel.name),
                    ephemeral: (_b = options === null || options === void 0 ? void 0 : options.ephemeralError) !== null && _b !== void 0 ? _b : true,
                });
                return null;
            }
        }
        const player = playerManager.get(interaction.guildId);
        const query = interaction.options.getString("query", true);
        yield interaction.deferReply({ ephemeral: options === null || options === void 0 ? void 0 : options.ephemeral });
        // search tracks
        const searchResult = yield player.search(query);
        const firstResult = searchResult[0];
        if (!firstResult || !firstResult.tracks.length) {
            yield interaction.followUp({
                content: playerManager.translations.play.noTracksFound.replace("{query}", query),
            });
            return null;
        }
        // play track(s)
        const playOptions = {
            tracks: firstResult.playlist
                ? firstResult.tracks
                : firstResult.tracks.slice(0, 1),
            channel: interaction.member.voice.channel,
        };
        if (immediate)
            yield player.play(playOptions);
        else
            yield player.add(playOptions);
        return firstResult;
    });
}
exports.playTracks = playTracks;
//# sourceMappingURL=index.js.map