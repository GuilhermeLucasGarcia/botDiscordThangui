"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileEngine = void 0;
const voice_1 = require("@discordjs/voice");
const promises_1 = require("fs/promises");
const music_metadata_1 = require("music-metadata");
const path_1 = __importDefault(require("path"));
const fs_1 = require("../utils/fs");
function isFile(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const stats = yield (0, promises_1.stat)(path);
            return stats.isFile();
        }
        catch (e) {
            return false;
        }
    });
}
/**
 * Player engine to search/stream tracks that are stored in the file system.
 */
exports.fileEngine = {
    source: "file",
    isResponsible(query, { fileRoot }) {
        return !!fileRoot && (0, fs_1.isSubPath)(fileRoot, query);
    },
    search(query, playerOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // refuse to search files outside of fileRoot
            if (!this.isResponsible(query, playerOptions))
                return [];
            if (!(yield isFile(query)))
                return [];
            // get file metadata
            let metadata;
            try {
                metadata = yield (0, music_metadata_1.parseFile)(query, { skipCovers: true });
            }
            catch (e) {
                return [];
            }
            const track = {
                title: metadata.common.title || path_1.default.basename(query),
                duration: metadata.format.duration || 0,
                url: query,
                artist: (_a = metadata.common.artists) === null || _a === void 0 ? void 0 : _a.join(", "),
                source: this.source,
            };
            return [{ tracks: [track], source: this.source }];
        });
    },
    getStream(track, playerOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            // refuse to stream files outside of fileRoot
            if (!this.isResponsible(track.url, playerOptions))
                return null;
            if (!(yield isFile(track.url)))
                return null;
            return { stream: track.url, type: voice_1.StreamType.Arbitrary };
        });
    },
};
//# sourceMappingURL=file.js.map