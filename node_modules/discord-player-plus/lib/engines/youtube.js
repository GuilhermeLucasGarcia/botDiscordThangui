"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.youtubeEngine = void 0;
const play_dl_1 = __importDefault(require("play-dl"));
const responsibleRegex = /^https?:\/\/((www\.|music\.)?youtube\.com|youtu\.be)\//;
/**
 * Player engine to search/stream tracks from YouTube.
 */
exports.youtubeEngine = {
    source: "youtube",
    isResponsible(query) {
        return responsibleRegex.test(query);
    },
    search(query, _, searchOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isPlaylist(query))
                return yield searchPlaylist(query, searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.limit);
            const videos = yield play_dl_1.default.search(query, {
                source: { youtube: "video" },
                limit: searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.limit,
            });
            return [
                {
                    tracks: videos.map((video) => mapYouTubeVideo(video)),
                    source: this.source,
                },
            ];
        });
    },
    getStream(track, playerOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield play_dl_1.default.stream(track.url, {
                quality: playerOptions.quality === "low"
                    ? 0
                    : playerOptions.quality === "medium"
                        ? 1
                        : 2,
                seek: (track === null || track === void 0 ? void 0 : track.seek) ? track.seek / 1000 : undefined,
            });
        });
    },
};
function isPlaylist(query) {
    return (exports.youtubeEngine.isResponsible(query, {}) &&
        (query.includes("/playlist") || query.includes("&list=")));
}
function searchPlaylist(query, limit) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const playlist = yield play_dl_1.default.playlist_info(query);
        let playlistVideos = playlist.page(1);
        // limit/fetch more videos (playlist will only include first 100 songs by default)
        if (!limit || limit < 0) {
            playlistVideos = yield playlist.all_videos();
        }
        else if (limit <= 100) {
            playlistVideos = playlistVideos.slice(0, limit);
        }
        else {
            const remainingVideos = yield playlist.next(limit - 100);
            playlistVideos = playlistVideos.concat(remainingVideos);
        }
        const playlistInfo = playlist.url
            ? {
                title: (_a = playlist.title) !== null && _a !== void 0 ? _a : "",
                url: (_b = playlist.url) !== null && _b !== void 0 ? _b : "",
                thumbnailUrl: (_c = playlist.thumbnail) === null || _c === void 0 ? void 0 : _c.url,
            }
            : undefined;
        return [
            {
                tracks: playlistVideos.map((video) => {
                    return Object.assign(Object.assign({}, mapYouTubeVideo(video)), { playlist: playlistInfo });
                }),
                playlist: playlistInfo,
                source: exports.youtubeEngine.source,
            },
        ];
    });
}
function mapYouTubeVideo(video) {
    var _a, _b, _c;
    return {
        title: (_a = video.title) !== null && _a !== void 0 ? _a : "",
        url: video.url,
        thumbnailUrl: (_b = video.thumbnails[0].url) !== null && _b !== void 0 ? _b : "",
        duration: video.durationInSec,
        artist: (_c = video.channel) === null || _c === void 0 ? void 0 : _c.name,
        source: exports.youtubeEngine.source,
    };
}
//# sourceMappingURL=youtube.js.map