"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.spotifyEngine = void 0;
const isomorphic_unfetch_1 = __importDefault(require("isomorphic-unfetch"));
const spotify_url_info_1 = __importDefault(require("spotify-url-info"));
const youtube_1 = require("./youtube");
const { getTracks, getData } = (0, spotify_url_info_1.default)(isomorphic_unfetch_1.default);
const responsibleRegex = /^https?:\/\/open.spotify.com\//;
/**
 * Player engine to search/stream tracks from Spotify.
 * Spotify does not provide a web api to stream tracks so the track will be streamed from YouTube instead.
 */
exports.spotifyEngine = {
    source: "spotify",
    isResponsible(query) {
        return responsibleRegex.test(query);
    },
    search(query, _, searchOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const isPlaylist = query.includes("open.spotify.com/playlist");
            if (isPlaylist)
                return yield searchPlaylist(query, searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.limit);
            const tracks = yield getTracks(query);
            return [
                {
                    tracks: tracks.map((track) => mapSpotifyTrack(track)),
                    source: this.source,
                },
            ];
        });
    },
    getStream(track, playerOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const searchResults = yield youtube_1.youtubeEngine.search(track.artist ? `${track.title} ${track.artist}` : track.title, playerOptions, { limit: 1 });
            if (!searchResults.length || !searchResults[0].tracks.length)
                return null;
            const mappedTrack = searchResults[0].tracks[0];
            mappedTrack.seek = track.seek;
            return youtube_1.youtubeEngine.getStream(mappedTrack, playerOptions);
        });
    },
};
function searchPlaylist(query, limit) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield getData(query);
        if ((data === null || data === void 0 ? void 0 : data.type) !== "playlist")
            return [];
        const playlist = {
            title: data.name,
            url: data.external_urls.spotify,
            thumbnailUrl: data.images.length ? data.images[0].url : undefined,
        };
        let tracks = data.tracks.items.map((i) => {
            const mapped = mapSpotifyTrack(i.track);
            mapped.playlist = playlist;
            return mapped;
        });
        if (limit && tracks.length > limit) {
            tracks = tracks.slice(0, limit);
        }
        return [{ tracks, playlist, source: exports.spotifyEngine.source }];
    });
}
function mapSpotifyTrack(track) {
    var _a;
    return {
        title: track.name,
        url: track.external_urls.spotify,
        duration: Math.round(track.duration_ms / 1000),
        artist: (_a = track.artists) === null || _a === void 0 ? void 0 : _a.map((a) => a.name).join(", "),
        source: exports.spotifyEngine.source,
    };
}
//# sourceMappingURL=spotify.js.map